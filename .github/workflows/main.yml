name: Full CI Pipeline

on:
  push:
    branches:
      - Dev
  pull_request:
    branches:
      - Dev

jobs:
  # Frontend Build Job
  frontend-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install JavaScript dependencies
        run: npm install

      # - name: Run frontend tests
      #   run: npm test

      - name: Build frontend project
        run: npm run build

      - name: Display frontend build message
        run: echo "Frontend build finished successfully!"

  # Laravel Tests Job
  laravel-tests:
    runs-on: ubuntu-latest
    needs: frontend-build # This makes sure the frontend-build completes successfully before this job starts

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2 # Using v2 for more stability with 'with' options
        with:
          php-version: '8.2' # Ensure this matches your project's PHP version
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, imagick # Common PHP extensions for Laravel. Add any others your project needs.
          coverage: none # Can be 'xdebug', 'pcov' if you need code coverage

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"

      - name: Install Composer Dependencies
        run: composer install --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

      - name: Generate Application Key
        run: php artisan key:generate

      - name: Set Directory Permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Create SQLite Database
        run: |
          mkdir -p database
          touch database/database.sqlite

      - name: Run Laravel Tests (PHPUnit/Pest)
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: php artisan test # Or 'php artisan phpunit' if you prefer

      - name: Display Laravel tests message
        run: echo "Laravel tests finished successfully!"
