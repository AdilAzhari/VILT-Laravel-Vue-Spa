name: Laravel CI/CD

on: [push, pull_request]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, ctype, fileinfo, dom, curl, mysql, pdo, pdo_mysql
          tools: composer:v2, pint
          coverage: pcov

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: pint

      - name: Run Laravel Pint
        run: ./vendor/bin/pint --test

      - name: Run ESLint
        run: npx eslint resources/js --ext .js,.vue --fix

  analyze:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          tools: phpstan, rector

      - name: Run PHPStan
        run: ./vendor/bin/phpstan analyse --memory-limit=1G

      - name: Run Rector (Dry Run)
        run: ./vendor/bin/rector process --dry-run --clear-cache

  security:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # More reliable security check alternatives
      - name: Check PHP vulnerabilities
        run: composer audit
      
      - name: Check JS vulnerabilities (npm)
        run: npm audit --production
        
      - name: Check JS vulnerabilities (yarn)
        if: fileExists('yarn.lock')
        run: yarn audit --level moderate

  test:
    needs: [setup, lint, analyze, security]
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: pcov

      - name: Run Tests
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: test_db
          DB_USERNAME: root
          DB_PASSWORD: password
        run: |
          php artisan config:clear
          php artisan migrate:fresh --env=testing --force
          php artisan test --coverage-clover=coverage.xml

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
