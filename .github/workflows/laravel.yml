name: Laravel CI/CD

on:
  push:
    branches: [ main, master ] # Adjust branches as needed
  pull_request:
    branches: [ main, master ] # Adjust branches as needed

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, ctype, fileinfo, dom, curl, mysql, pdo, pdo_mysql
          tools: composer:v2 # Only need composer here, as pint/rector will be installed by composer install
          coverage: pcov # pcov is fine here

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php- # Fallback to common key if exact match not found

      - name: Install Composer dependencies # This creates the 'vendor' directory for the cache
        run: composer install --prefer-dist --no-progress --no-interaction --ansi

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, ctype, fileinfo, dom, curl, mysql, pdo, pdo_mysql
          tools: composer:v2 # Ensure composer is available for subsequent steps

      - name: Restore Composer dependencies # <--- ADDED
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Composer dependencies # <--- ADDED (in case of cache miss or lock file change)
        run: composer install --prefer-dist --no-progress --no-interaction --ansi

      - name: Run Laravel Pint
        run: ./vendor/bin/pint --test # This should now work

      - name: Run ESLint
        run: npx eslint resources/js --ext .js,.vue --fix

  analyze:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, ctype, fileinfo, dom, curl, mysql, pdo, pdo_mysql
          tools: composer:v2 # Ensure composer is available

      - name: Restore Composer dependencies # <--- ADDED
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Composer dependencies # <--- ADDED
        run: composer install --prefer-dist --no-progress --no-interaction --ansi

      # - name: Run PHPStan
      #   run: ./vendor/bin/phpstan analyse --memory-limit=1G

      - name: Run Rector (Dry Run)
        run: ./vendor/bin/rector process --dry-run --clear-cache # This should now work

  security:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, ctype, fileinfo, dom, curl, mysql, pdo, pdo_mysql
          tools: composer:v2 # Ensure composer is available

      - name: Restore Composer dependencies # <--- ADDED
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Composer dependencies # <--- ADDED
        run: composer install --prefer-dist --no-progress --no-interaction --ansi

      - name: Check PHP vulnerabilities
        run: composer audit

      - name: Check JS vulnerabilities (npm/yarn)
        run: |
          if [ -f yarn.lock ]; then
            yarn audit --level moderate
          else
            npm audit --production
          fi

  test:
    needs: [setup, lint, analyze, security]
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        ports: ["3306:3306"]
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, ctype, fileinfo, dom, curl, mysql, pdo, pdo_mysql
          tools: composer:v2
          coverage: pcov

      - name: Restore Composer dependencies # <--- ADDED
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install Composer dependencies # <--- ADDED
        run: composer install --prefer-dist --no-progress --no-interaction --ansi

      - name: Run Tests
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: test_db
          DB_USERNAME: root
          DB_PASSWORD: password
        run: |
          php artisan config:clear
          php artisan migrate:fresh --env=testing --force
          # php artisan test --coverage-clover=coverage.xml

      - name: Upload Coverage
        uses: codecov/codecov-action@v3
